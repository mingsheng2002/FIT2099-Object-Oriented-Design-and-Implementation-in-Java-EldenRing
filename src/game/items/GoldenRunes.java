package game.items;

import edu.monash.fit2099.engine.actors.Actor;
import edu.monash.fit2099.engine.items.DropAction;
import edu.monash.fit2099.engine.items.Item;
import edu.monash.fit2099.engine.positions.Location;
import game.actions.playeractions.ConsumeAction;
import game.controllers.RunesManager;
import game.enums.Status;
import game.resets.Resettable;
import game.utils.RandomNumberGenerator;

/**
 * A class representing Golden Runes, an item that, when consumed, can generate any amount of runes ranging from 200 to 10000.
 * Created by:
 * @author Che'er Min Yi
 * @author Chong Ming Sheng
 * @author Lam Xin Yuan
 * @version 1.0.0
 * @see Item
 * @see Consumable
 */
public class GoldenRunes extends Item implements Consumable {

    /**
     * Minimum amount of runes generated by Golden Runes after being consumed
     */
    private static final int MIN_RUNES_AWARD = 200;
    /**
     * Maximum amount of runes generated by Golden Runes after being consumed
     */
    private static final int MAX_RUNES_AWARD = 10000;
    /**
     *  An instance of Consume Action
     */
    ConsumeAction consumeAction;

    /***
     * Constructor for GoldenRunes.
     * @see ConsumeAction
     */
    public GoldenRunes() {
        super("Golden Runes", '*', true);
        consumeAction = new ConsumeAction(this);
    }

    /**
     * Adds Consume Action when Golden Runes is in player's inventory.
     * @param currentLocation The location of the actor carrying this Item.
     * @param actor The actor carrying this Item.
     * @see Status#HOSTILE_TO_ENEMY
     */
    @Override
    public void tick(Location currentLocation, Actor actor) {
        if (actor.hasCapability(Status.HOSTILE_TO_ENEMY)) {
            this.addAction(consumeAction);
        }
    }

    /**
     * Removes the Consume Action when Golden Runes are dropped.
     * @param actor The actor dropping this Item.
     * @return The DropAction for dropping this Item.
     * @see Item#getDropAction(Actor)
     */
    @Override
    public DropAction getDropAction(Actor actor) {
        this.removeAction(consumeAction);
        return super.getDropAction(actor);
    }

    /**
     * Consumes the Golden Runes, generating a random amount of runes and adding them to the player's runes.
     * Then, remove Golden Runes from player's inventory.
     * @param actor The actor that consumes the item.
     * @see RandomNumberGenerator#getRandomInt(int)
     * @see RunesManager#getInstance()
     * @see RunesManager#incrementPlayerRunes(int)
     */
    @Override
    public void consumedBy(Actor actor) {
        int amount = RandomNumberGenerator.getRandomInt(MIN_RUNES_AWARD, MAX_RUNES_AWARD);
        RunesManager.getInstance().incrementPlayerRunes(amount);
        actor.removeItemFromInventory(this);
    }
}